/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.example

import javafx.application.Application
import javafx.application.Application.launch
import javafx.event.EventHandler
import javafx.geometry.Insets
import javafx.scene.Group
import javafx.scene.Scene
import javafx.scene.control.Button
import javafx.scene.image.Image
import javafx.scene.image.ImageView
import javafx.scene.input.KeyCode
import javafx.scene.input.KeyEvent
import javafx.scene.layout.HBox
import javafx.scene.media.AudioClip
import javafx.scene.paint.Color
import javafx.scene.text.Font
import javafx.scene.text.Text
import javafx.stage.Stage


const val WIDTH = 640.0
const val HEIGHT = 400.0

class InvinciBagel(
) : Application() {
    val root: Group
    val scene: Scene
    var buttonContainer: HBox? = null
    var gameButton: Button
    var helpButton: Button
    var legalButton: Button
    var scoreButton: Button
    var splashScreen: Image? = null
    var instructionLayer: Image? = null
    var legalLayer: Image? = null
    var scoresLayer: Image? = null
    var skyCloud: Image? = null

    var scoreText: Text? = null
    var gameScore = 0
    private var scoreFont: Font? = null
    var scoreLabel: Text? = null

    var iB0 : Image? = null
    var iB1 : Image? = null
    var iB2 : Image? = null
    var iB3 : Image? = null
    var iB4 : Image? = null
    var iB5 : Image? = null
    var iB6 : Image? = null
    var iB7 : Image? = null
    var iB8 : Image? = null
    var iP0 : Image? = null
    var iP1 : Image? = null
    var iT0 : Image? = null
    var iT1 : Image? = null
    var iE0 : Image? = null
    var iC0 : Image? = null
    var iC1 : Image? = null

    var iPR0: Prop? = null
    var iPR1: Prop? = null
    var iPH0: PropH? = null
    var iPV0: PropV? = null
    var iPV1: PropV? = null
    var iPB0: PropB? = null

    var splashScreenBackplate: ImageView? = null
    var splashScreenTextArea: ImageView? = null
    var up = false
    var down = false
    var left = false
    var right = false
    var wKey = false
    var aKey = false
    var sKey = false
    var dKey = false
    var sKeySound: AudioClip? = null
    var wKeySound: AudioClip? = null
    var leftKeySound: AudioClip? = null
    var rightKeySound: AudioClip? = null
    var upKeySound: AudioClip? = null
    var downKeySound: AudioClip? = null

    var gamePlayLoop: GamePlayLoop? = null
    var castDirector: CastingDirector? = null
    var iBagel: Bagel? = null
    var iBullet: Projectile? = null
    var iCheese: Projectile? = null
    var iBeagle: Enemy? = null
    var iTR0: Treasure? = null
    var iTR1: Treasure? = null

    init {
        root = Group()
        scene = Scene(root, WIDTH, HEIGHT)

        gameButton = Button("Play game")
        helpButton = Button("HELP")
        scoreButton = Button("HIGH SCORES")
        legalButton = Button("LEGAL & CREDITS")

    }
    override fun start(primaryStage: Stage?) {
        primaryStage?.title = "InvinciBagel"
        primaryStage?.scene = scene
        primaryStage?.show()

        createSceneEventHandling()
        loadImageAssets()
        loadSoundAssets()
        createGameActors()
        addGameActorNodes()
        createCastingDirection()
        createSplashScreenNodes()
        addNodesToStackPane()
        createStartGameLoop()
    }

    private fun createStartGameLoop() {
        gamePlayLoop = GamePlayLoop(this)
        gamePlayLoop?.start()
    }

    private fun addNodesToStackPane() {
        root.children.addAll(splashScreenBackplate, splashScreenTextArea, buttonContainer, scoreLabel, scoreText)
    }

    private fun createSplashScreenNodes() {
        scoreText = Text("${gameScore}")
        scoreText!!.layoutX = 525.0
        scoreText!!.layoutY = 385.0
        scoreFont = Font("Verdana", 20.0)
        scoreText!!.font = scoreFont
        scoreText!!.fill = Color.BLUE
        scoreLabel = Text("SCORE:")
        scoreLabel!!.layoutX = 445.0
        scoreLabel!!.layoutY = 385.0
        scoreLabel!!.fill = Color.BLACK

        buttonContainer = HBox(12.0)
        buttonContainer?.children?.addAll(gameButton, helpButton, scoreButton, legalButton)
        buttonContainer?.padding = Insets(0.0, 0.0, 10.0, 16.0)
        buttonContainer?.layoutY = 365.0

        splashScreenBackplate = ImageView(splashScreen)
        splashScreenTextArea = ImageView(instructionLayer)

        gameButton?.onAction = EventHandler {
            splashScreenBackplate?.image = skyCloud
            splashScreenBackplate?.isVisible = true
            splashScreenBackplate?.toBack()
            splashScreenTextArea?.isVisible = false
        }
        helpButton?.onAction = EventHandler {
            splashScreenBackplate?.isVisible = true
            splashScreenTextArea?.isVisible = true
            splashScreenBackplate?.image = splashScreen
            splashScreenTextArea?.image = instructionLayer
            splashScreenTextArea?.toFront()
            splashScreenBackplate?.toFront()
            splashScreenTextArea?.toFront()
            buttonContainer?.toFront()
        }
        scoreButton?.onAction = EventHandler {
            splashScreenBackplate?.isVisible = true
            splashScreenTextArea?.isVisible = true
            splashScreenBackplate?.image = splashScreen
            splashScreenTextArea?.image = scoresLayer
            splashScreenBackplate?.toFront()
            splashScreenTextArea?.toFront()
            buttonContainer?.toFront()
        }
        legalButton?.onAction = EventHandler {
            splashScreenBackplate?.isVisible = true
            splashScreenTextArea?.isVisible = true
            splashScreenBackplate?.image = splashScreen
            splashScreenTextArea?.image = legalLayer
            splashScreenBackplate?.toFront()
            splashScreenTextArea?.toFront()
            buttonContainer?.toFront()
        }
    }

    private fun createSceneEventHandling() {
        scene.onKeyPressed = EventHandler<KeyEvent> {
            when(it.code) {
                KeyCode.UP -> up = true
                KeyCode.DOWN -> down = true
                KeyCode.LEFT -> left = true
                KeyCode.RIGHT -> right = true
                KeyCode.W -> wKey = true
                KeyCode.S -> sKey = true
                KeyCode.A -> aKey = true
                KeyCode.D -> dKey = true
            }
        }

        scene.onKeyReleased = EventHandler<KeyEvent> {
            when(it.code) {
                KeyCode.UP -> up = false
                KeyCode.DOWN -> down = false
                KeyCode.LEFT -> left = false
                KeyCode.RIGHT -> right = false
                KeyCode.W -> wKey = false
                KeyCode.S -> sKey = false
                KeyCode.A -> aKey = false
                KeyCode.D -> dKey = false
            }
        }
    }

    private fun loadSoundAssets() {

        leftKeySound = AudioClip(javaClass.getResource("/sounds/leftmono.wav").toString())
        rightKeySound = AudioClip(javaClass.getResource("/sounds/rightmono.wav").toString())
        upKeySound = AudioClip(javaClass.getResource("/sounds/upmono.wav").toString())
        downKeySound = AudioClip(javaClass.getResource("/sounds/downmono.wav").toString())
        sKeySound = AudioClip(javaClass.getResource("/sounds/smono.wav").toString())
        wKeySound = AudioClip(javaClass.getResource("/sounds/wmono.wav").toString())
    }

    private fun loadImageAssets() {
        splashScreen = Image("images/invincibagelsplash.png", 640.0, 400.0, true, false, true);
        instructionLayer = Image("images/invincibagelinstruct.png", 640.0, 400.0, true, false, true)
        legalLayer = Image("images/invincibagelcreds.png", 640.0, 400.0, true, false, true)
        scoresLayer = Image("images/invincibagelscores.png", 640.0, 400.0, true, false, true)

        iB0 = Image("images/sprite0.png", 81.0, 81.0, true, false, true)
        iB1 = Image("images/sprite1.png", 81.0, 81.0, true, false, true)
        iB2 = Image("images/sprite2.png", 81.0, 81.0, true, false, true)
        iB3 = Image("images/sprite3.png", 81.0, 81.0, true, false, true)
        iB4 = Image("images/sprite4.png", 81.0, 81.0, true, false, true)
        iB5 = Image("images/sprite5.png", 81.0, 81.0, true, false, true)
        iB6 = Image("images/sprite6.png", 81.0, 81.0, true, false, true)
        iB7 = Image("images/sprite7.png", 81.0, 81.0, true, false, true)
        iB8 = Image("images/sprite8.png", 81.0, 81.0, true, false, true)
        iP0 = Image("images/prop0.png", 72.0, 32.0, true, false, true)
        iP1 = Image("images/prop1.png", 496.0, 92.0, true, false, true)
        iT0 = Image("images/treasure1.png", 64.0, 64.0, true, false, true)
        iT1 = Image("images/treasure2.png", 64.0, 64.0, true, false, true)
        iE0 = Image("images/enemy.png", 64.0, 64.0, true, false, true)
        iC0 = Image("images/bullet.png", 64.0, 24.0, true, false, true)
        iC1 = Image("images/cheese.png", 32.0, 32.0, true, false, true)
        skyCloud = Image("images/skycloud.png", 640.0, 400.0, true, false, true)
    }

    private fun createGameActors() {
        iBagel = Bagel(this,
                "M57,10 L46,25 30,26 30,41 18,41 18,44 27,56 37,57 35,75 39,81 43,81 45,53 54,40 63,43 72,26 Z",
                WIDTH/2 - 100, HEIGHT/2,
                iB0!!, iB1!!, iB2!!, iB3!!, iB4!!, iB5!!, iB6!!, iB7!!, iB8!!);
        val groundX = WIDTH/2 - 40
        val groundY = HEIGHT/2 + 130
        iPR0 = Prop("M150 0 L75 200 L225 200 Z", groundX, groundY, iP0!!)
        iPR1 = Prop("M150 0 L75 200 L225 200 Z", 80.0, 8.0, iP1!!)
        iPH0 = PropH("M150 0 L75 200 L225 200 Z", groundX + 72.0, groundY, iP0!!)
        iPV0 = PropV("M150 0 L75 200 L225 200 Z", groundX, groundY -  32, iP0!!)
        iPV1 = PropV("M150 0 L75 200 L225 200 Z", 80.0, 88.0, iP1!!)
        iPB0 = PropB("M150 0 L75 200 L225 200 Z", groundX + 72.0, groundY - 32, iP0!!)

        iTR0 = Treasure("M0 0 L0 64 64 64 64 0 Z", 50.0, 105.0, iT0!!)
        iTR1 = Treasure("M0 0 L0 64 64 64 64 0 Z", 533.0, 206.0, iT1!!)

        iBeagle = Enemy(this,"M0 6 L0 52 70 52 70 70 70 93 115 45 115 0 84 0 68 16 Z", -116.0, 0.0, iE0!!)
        iBullet = Projectile("M0 4 L0 16 64 16 64 4 Z", -70.0, 0.0, iC0!!)
        iCheese = Projectile("M0 0 L0 32 29 32 29 0 Z", -32.0, 0.0, iC1!!)
    }

    private fun addGameActorNodes() {
        root.children.add(iPR0!!.spriteFrame)
        root.children.add(iPR1!!.spriteFrame)
        root.children.add(iPH0!!.spriteFrame)
        root.children.add(iPV0!!.spriteFrame)
        root.children.add(iPV1!!.spriteFrame)
        root.children.add(iPB0!!.spriteFrame)
        root.children.add(iTR0!!.spriteFrame)
        root.children.add(iTR1!!.spriteFrame)
        root.children.add(iBeagle!!.spriteFrame)
        root.children.add(iBullet!!.spriteFrame)
        root.children.add(iCheese!!.spriteFrame)

        root.children.add(iBagel!!.spriteFrame)
    }

    private fun createCastingDirection() {
        castDirector = CastingDirector()
        castDirector!!.addCurrentCast(iPR0!!, iPR1!!, iPH0!!, iPV0!!, iPV1!!, iPB0!!, iTR0!!, iTR1!!, iBeagle!!, iBullet!!, iCheese!!)
    }

    fun playLeftSound() {
        this.leftKeySound!!.play()
    }

    fun playRightSound() {
        this.rightKeySound!!.play()
    }

    fun playUpSound() {
        this.upKeySound!!.play()
    }

    fun playDownSound() {
        this.downKeySound!!.play()
    }

    fun playSSound() {
        this.sKeySound!!.play()
    }

    fun playWSound() {
        this.wKeySound!!.play()
    }
}

fun main(args: Array<String>) {
    launch(InvinciBagel::class.java, *args)
}

